#ifndef ENVIRONMENT_H
#define ENVIRONMENT_H

#include <vector>
#include <string>
#include <utility>
#include <cmath>
#include <unordered_set>

// Point of Interest (POI) class definition
class POI {
public:
    int id;
    int classId;
    double x, y; // Coordinates of the POI
    double observationRadius; // Observation radius of the POI
    int coupling; // Minimum number of agents needed in vicinity to generate reward 
    int reward; // Generated by each POI if coupling criteria is met
    int penalty; // Penalty given to each agent per timestep

    POI(int id, int classId, double x, double y, 
        double observationRadius, int coupling, int reward, int penalty);
};

// Simulation environment class definition
class Environment {
private:
    std::vector<POI> pois; // Vector to store POIs
    int xLength, yLength; // Environment dimensions

public:
    // Method to load configuration from YAML file
    void loadConfig(const std::string& filename);

    // Method to return the POIs in the environment
    std::vector<POI> getPOIs();

    // Method to return the dimensions of the environment
    std::pair<int, int> getDimensions();

    // compute the rewards generated by the provided agents configuration
    std::vector<int> getRewards(std::vector<std::pair<double, double>> agentPositions);

    // Method to print information about loaded POIs
    void printInfo() const;

    // Clear all the stored POIs and set other members to 0
    void reset();

};

#endif // ENVIRONMENT_H
